// Code generated by MockGen. DO NOT EDIT.
// Source: ./order_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/dimabelunin7/homework/hw-4/internal/domain"
	service "gitlab.ozon.dev/dimabelunin7/homework/hw-4/internal/service"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderService) AddOrder(ctx context.Context, orderDto service.OrderDto, packageType domain.PackageType, isAdditionalFilm bool) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, orderDto, packageType, isAdditionalFilm)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderServiceMockRecorder) AddOrder(ctx, orderDto, packageType, isAdditionalFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderService)(nil).AddOrder), ctx, orderDto, packageType, isAdditionalFilm)
}

// CompleteOrder mocks base method.
func (m *MockOrderService) CompleteOrder(ctx context.Context, orderId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOrder", ctx, orderId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOrder indicates an expected call of CompleteOrder.
func (mr *MockOrderServiceMockRecorder) CompleteOrder(ctx, orderId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOrder", reflect.TypeOf((*MockOrderService)(nil).CompleteOrder), ctx, orderId, userId)
}

// GetOrderByID mocks base method.
func (m *MockOrderService) GetOrderByID(ctx context.Context, orderId int64) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderId)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderServiceMockRecorder) GetOrderById(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderService)(nil).GetOrderByID), ctx, orderId)
}

// GetOrders mocks base method.
func (m *MockOrderService) GetOrders(ctx context.Context, lastId *int64, limit *int, searchFilter *service.SearchFilter) []domain.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, lastId, limit, searchFilter)
	ret0, _ := ret[0].([]domain.Order)
	return ret0
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderServiceMockRecorder) GetOrders(ctx, lastId, limit, searchFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderService)(nil).GetOrders), ctx, lastId, limit, searchFilter)
}

// GetOrdersBySpecificStatus mocks base method.
func (m *MockOrderService) GetOrdersBySpecificStatus(ctx context.Context, status domain.Status) []domain.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersBySpecificStatus", ctx, status)
	ret0, _ := ret[0].([]domain.Order)
	return ret0
}

// GetOrdersBySpecificStatus indicates an expected call of GetOrdersBySpecificStatus.
func (mr *MockOrderServiceMockRecorder) GetOrdersBySpecificStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersBySpecificStatus", reflect.TypeOf((*MockOrderService)(nil).GetOrdersBySpecificStatus), ctx, status)
}

// GetOrdersByUserId mocks base method.
func (m *MockOrderService) GetOrdersByUserID(ctx context.Context, userID int64, limit *int, lastId *int64) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID, limit, lastId)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserId indicates an expected call of GetOrdersByUserId.
func (mr *MockOrderServiceMockRecorder) GetOrdersByUserId(ctx, userID, limit, lastId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderService)(nil).GetOrdersByUserID), ctx, userID, limit, lastId)
}

// GetRefundedOrders mocks base method.
func (m *MockOrderService) GetRefundedOrders(ctx context.Context, lastId *int64, limit *int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundedOrders", ctx, lastId, limit)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundedOrders indicates an expected call of GetRefundedOrders.
func (mr *MockOrderServiceMockRecorder) GetRefundedOrders(ctx, lastId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundedOrders", reflect.TypeOf((*MockOrderService)(nil).GetRefundedOrders), ctx, lastId, limit)
}

// RefundOrder mocks base method.
func (m *MockOrderService) RefundOrder(ctx context.Context, orderId int64, expirationDays int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundOrder", ctx, orderId, expirationDays)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefundOrder indicates an expected call of RefundOrder.
func (mr *MockOrderServiceMockRecorder) RefundOrder(ctx, orderId, expirationDays interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundOrder", reflect.TypeOf((*MockOrderService)(nil).RefundOrder), ctx, orderId, expirationDays)
}

// RetrieveOrdersFromFile mocks base method.
func (m *MockOrderService) RetrieveOrdersFromFile(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveOrdersFromFile", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveOrdersFromFile indicates an expected call of RetrieveOrdersFromFile.
func (mr *MockOrderServiceMockRecorder) RetrieveOrdersFromFile(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOrdersFromFile", reflect.TypeOf((*MockOrderService)(nil).RetrieveOrdersFromFile), ctx, data)
}

// ReturnOrder mocks base method.
func (m *MockOrderService) ReturnOrder(ctx context.Context, orderId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderServiceMockRecorder) ReturnOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderService)(nil).ReturnOrder), ctx, orderId)
}
