// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/dimabelunin7/homework/hw-4/internal/domain"
	repository "gitlab.ozon.dev/dimabelunin7/homework/hw-4/internal/pkg/repository"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, orderID, userID int64, expirationDate time.Time, weight, cost int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, orderID, userID, expirationDate, weight, cost)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, orderID, userID, expirationDate, weight, cost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, orderID, userID, expirationDate, weight, cost)
}

// Delete mocks base method.
func (m *MockOrderRepository) Delete(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderRepositoryMockRecorder) Delete(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderRepository)(nil).Delete), ctx, orderID)
}

// Find mocks base method.
func (m *MockOrderRepository) Find(ctx context.Context, orderID int64) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, orderID)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOrderRepositoryMockRecorder) Find(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrderRepository)(nil).Find), ctx, orderID)
}

// FindAll mocks base method.
func (m *MockOrderRepository) FindAll(ctx context.Context, filter repository.Filter, lastId *int64, limit *int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter, lastId, limit)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockOrderRepositoryMockRecorder) FindAll(ctx, filter, lastId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockOrderRepository)(nil).FindAll), ctx, filter, lastId, limit)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(ctx context.Context, orderID, userID int64, expirationDate time.Time, status domain.Status, weight, cost int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, orderID, userID, expirationDate, status, weight, cost)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(ctx, orderID, userID, expirationDate, status, weight, cost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), ctx, orderID, userID, expirationDate, status, weight, cost)
}

// MockAuditEntriesRepository is a mock of AuditEntriesRepository interface.
type MockAuditEntriesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditEntriesRepositoryMockRecorder
}

// MockAuditEntriesRepositoryMockRecorder is the mock recorder for MockAuditEntriesRepository.
type MockAuditEntriesRepositoryMockRecorder struct {
	mock *MockAuditEntriesRepository
}

// NewMockAuditEntriesRepository creates a new mock instance.
func NewMockAuditEntriesRepository(ctrl *gomock.Controller) *MockAuditEntriesRepository {
	mock := &MockAuditEntriesRepository{ctrl: ctrl}
	mock.recorder = &MockAuditEntriesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditEntriesRepository) EXPECT() *MockAuditEntriesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditEntriesRepository) Create(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx)
}

// Create indicates an expected call of Create.
func (mr *MockAuditEntriesRepositoryMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditEntriesRepository)(nil).Create), ctx)
}
